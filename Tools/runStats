#! /usr/bin/env python

from __future__ import division
import sys
import getopt
import codecs
import re
import urllib2
import logging
import os
from fontTools import subset, compare, treeshake
from fontTools.misc.captureOutput import captureOutput
import unicodedata
from fontTools.ttLib import TTFont
from bs4 import BeautifulSoup
from os import rename, listdir
from urllib2 import urlopen
from cStringIO import StringIO

def usage():
    print("usage: runStats inputFile")
    sys.exit(1)        

def makeArgs(*params):
    args = []
    for param in params:
        args.append(param)
    return args

def treeShake(fontFile):
    args = makeArgs(fontFile)
    with captureOutput():
        treeshake.main(args)         

    reducedFontFile = 'Reduced'+fontFile
    return reducedFontFile

def makeOutputFileName(input, extension):
    dirName, fileName = os.path.split(input)
    fileName, ext = os.path.splitext(fileName)
    output = os.path.join(dirName, fileName + extension)
    n = 1
    while os.path.exists(output):
        output = os.path.join(dirName, fileName + "#" + repr(n) + extension)
        n = n + 1
    return output

def readFile(input, encoding):
    try:
        with codecs.open(input) as file:
            data=file.read()
    except:
        raise IOError("Couldn't open file "+input)

    try:
        data = data.decode(encoding)
    except:
        raise ValueError("Different encoding or wrong code provided: "+encoding)
    return data

def readPage(input):
    #some sites block common non-browser user agent strings, better use a regular one
    hdr = {'User-Agent':'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.7) Gecko/2009021910 Firefox/3.0.7'}
    request = urllib2.Request(input, headers = hdr)
    try:
        page = urllib2.urlopen(request)
    except:
        raise ValueError("Couldn't load file or URL "+input)
    return page

def readInput(input, encoding):
    try:
        data = readFile(input, encoding)
    except IOError:
        data = readPage(input)

    soup = BeautifulSoup(data)
    texts = soup.findAll(text=True)
    [s.extract() for s in soup(['style', 'script', '[document]', 'head', 'title'])]
    string = soup.getText()

    charList = list(set(string))

    #reference to unicode categories http://www.sql-und-xml.de/unicode-database/#kategorien
    non_printable = ['Zs', 'Zl', 'Zp', 'Cc']
    charList = [x for x in charList if unicodedata.category(x) not in non_printable]

    return charList

def generateStats(stats):

    target = open("generalStats", 'w')
    target.truncate()

    currentDir = os.getcwd()

    origReduction = []
    tsReduction = []

    template = "{0:25}  {1:10} {2:30}"

    for info in stats:

        target.write(info[0]+" Analysis:\n")
        target.write("\n")
        target.write(template.format("Original font file size:", "{:,}".format(info[1]), "")+"\n")
        reduction = ((info[1] - info[2])*100)/info[1]
        origReduction.append(reduction)
        target.write(template.format("Size after tree-shaking:", "{:,}".format(info[2]), "(Reduction of %.2f%%)" % reduction )+"\n")
        target.write("\n")
        target.write(template.format("Subsetted font file size:", "{:,}".format(info[3]), "")+"\n")
        reduction = ((info[3] - info[4])*100)/info[3]
        tsReduction.append(reduction)
        target.write(template.format("Size after tree-shaking:", "{:,}".format(info[4]), "(Reduction of %.2f%%)" % reduction )+"\n")
        target.write("\n\n")

    target.close()

    target = open("averageStats", 'w')
    target.truncate()
    averageReduction = sum(origReduction)/len(origReduction)
    averageSubsetReduction =  sum(tsReduction)/len(tsReduction)

    target.write("============================================================\n")
    target.write("                            STATS                           \n")
    target.write("============================================================\n")

    target.write("Testing tree shake for {} fonts: \n\n".format(len(stats)))
    target.write("Average size reduction for whole fonts: {:.2f}%\n".format(averageReduction))
    target.write("Average size reduction for subsetted fonts: {:.2f}%\n\n".format(averageSubsetReduction))

    target.write("============================================================\n")
    target.write("                        SAMPLE RESULT                       \n")
    target.write("============================================================\n")
    target.write(stats[0][0]+" Analysis:\n")
    target.write("\n")
    target.write(template.format("Original font file size:", "{:,}".format(stats[0][1]), "")+"\n")
    reduction = ((stats[0][1] - stats[0][2])*100)/stats[0][1]
    origReduction.append(reduction)
    target.write(template.format("Size after tree-shaking:", "{:,}".format(stats[0][2]), "(Reduction of %.2f%%)" % reduction )+"\n")
    target.write("\n")
    target.write(template.format("Subsetted font file size:", "{:,}".format(stats[0][3]), "")+"\n")
    reduction = ((stats[0][3] - stats[0][4])*100)/stats[0][3]
    tsReduction.append(reduction)
    target.write(template.format("Size after tree-shaking:", "{:,}".format(stats[0][4]), "(Reduction of %.2f%%)" % reduction )+"\n")
    target.write("\n\n")

    target.close()
                             

def main(args):

    if len(args) > 0:
        with open(args[0], "r") as file:
            testSuite = []
            for nl, line in enumerate(file):
               try:
                    font, glyphs = line.split()
                    testSuite.append((font, glyphs, 'utf-8'))
               except:
                    font, glyphs, encoding = line.split()
                    testSuite.append((font, glyphs, encoding))
    else:
        usage()
    
    results = []
    for fontFile, inputFile, encoding in testSuite:
        tsFontFile = treeShake(fontFile) 
        charList = readInput(inputFile, encoding)
        glyphs = "--text="+''.join(charList)

        filesBefore = listdir(".")
        args = makeArgs(fontFile, glyphs)
        with captureOutput():
            subset.main(args)
        filesAfter = listdir(".")

        #tries to identifiy a new file created in the current folder
        #if fail, assumes that a file with the same name was already there 
        try:
            createdFile = [item for item in filesAfter if item not in filesBefore][0]
        except:
            createdFile = fontFile+'.subset'

        subsetFontFile = makeOutputFileName('Subset'+fontFile, '.ttf')
        rename(createdFile, subsetFontFile)
        tsSubsetFile = treeShake(subsetFontFile) 

        currentDir = os.getcwd()
        origSize = os.path.getsize(currentDir+"/"+fontFile)
        origTsSize = os.path.getsize(currentDir+"/"+tsFontFile)
        subsSize = os.path.getsize(currentDir+"/"+subsetFontFile)
        subsTsSize = os.path.getsize(currentDir+"/"+tsSubsetFile)

        results.append([fontFile, origSize, origTsSize, subsSize, subsTsSize])

        os.remove(tsFontFile)
        os.remove(subsetFontFile)
        os.remove(tsSubsetFile)
    generateStats(results)

if __name__ == '__main__':
  main(sys.argv[1:])
