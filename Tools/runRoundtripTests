#! /usr/bin/env python
"""
usage: runRoundtripTests [options] inputFile

    options:
    -f NAME folder: get all ttx from folder NAME as input files
"""

import sys
import getopt
import os
from fontTools.ttLib import TTFont
from fontTools.misc.captureOutput import captureOutput
from fontTools.ttLib.bytecodeContainer import BytecodeContainer, Program
from fontTools.ttLib.instructions import statements, instructionConstructor, abstractExecute
from fontTools import analysis
from fontTools import roundtrip
from fontTools import compare

def usage():
    print(__doc__)
    sys.exit(1)

def makeArgs(*params):
    args = []
    for param in params:
        args.append(param)
    return args

def get3ac(ttx):
    filename = "%s.tmp" % ttx
    args = makeArgs("-pfziG", ttx)
    with captureOutput() as out:
        try:
            analysis.main(args)
            result = out.getOutput()
        except:            
            result = out.getOutput()
    text_file = open(filename, "w")
    text_file.write(result)
    text_file.close()
    return filename

def getRoundtrip(threeaddr):
    
    filename = "roundtrip.tmp"
    args = makeArgs(threeaddr)
    result = ""
    with captureOutput() as out:
        try:
            roundtrip.main(args)
            result = out.getOutput()
        except:
            result = out.getOutput()
    text_file = open(filename, "w")
    text_file.write(result)
    text_file.close()
    
    tags = readTempFile(filename)
    os.remove(filename)
    return tags

def readTempFile(input):
    tags = {}
    current_tag = ""

    with open(input, "r") as file:
        for nl, line in enumerate(file):
            if line.isspace():
                current_tag = ""
            elif line.startswith('PREP:'):
                current_tag = 'prep'
                tags['prep'] = []
            elif line.startswith('glyf'):
                current_tag = line[5:-2]
                tags[current_tag] = []
            elif current_tag != "":
                tags[current_tag].append(line[:-1])

    return tags

def getBytecode(ttx):
    bytecode = {}
    tt = TTFont()
    tt.importXML(ttx, quiet=True)
    glyfs = tt.get('glyf').keys()
    for glyf in glyfs:
        try:
            assembly = tt['glyf'].glyphs[glyf].program.getAssembly()
            key = "{0}".format(glyf)
            bytecode[key] = []
            for instr in assembly:
                bytecode[key].append(instr)
        except:
            pass
    return bytecode

def runTests(jobs):

    def set_up(job):
        output = get3ac(job)
        roundtrip = getRoundtrip(output)
        bytecode = getBytecode(job)
        os.remove(output)
        return bytecode, roundtrip

    def stack_code_compare(bytecode, roundtrip):
        error = []
        for table in bytecode:
            try:
                for b, r in zip(bytecode[table], roundtrip[table]):
                    assert(b == r)
            except:
                error.append(table)
        return error

    def freetype_compare(ttxfile, bytecode, roundtrip):
        error = []
        
        # create font file from bytecode
        font_original = TTFont()
        font_original.importXML(ttxfile, quiet=True)
        bytecodeContainer = BytecodeContainer(font_original)
        for key in roundtrip.keys():
            program_tag = "glyf.{0}".format(key)
            instruction = constructInstructions(program_tag, roundtrip[key])
            bytecodeContainer.tag_to_programs[program_tag] = Program(instruction)
        bytecodeContainer.updateTTFont(font_original)
        font_original.save("font_original")
        font_original.close()

        # create font file from roundtrip
        font_roundtrip = TTFont()
        font_roundtrip.importXML(ttxfile, quiet=True)
        bytecodeContainer = BytecodeContainer(font_roundtrip)
        for key in roundtrip.keys():
            program_tag = "glyf.{0}".format(key)
            instruction = constructInstructions(program_tag, roundtrip[key])
            bytecodeContainer.tag_to_programs[program_tag] = Program(instruction)
        bytecodeContainer.updateTTFont(font_roundtrip)
        font_roundtrip.save("font_roundtrip")
        font_roundtrip.close()
 
        args = makeArgs("font_original", "font_roundtrip", "Notes")
        compare.main(args)

        return error

    def constructInstructions(program_tag, instructions):
            thisinstruction = None
            instructions_list = []
            def combineInstructionData(instruction,data):
                instruction.add_data(data)
            number = 0
            for instruction in instructions:
                instructionCons = instructionConstructor.instructionConstructor(instruction)
                instruction = instructionCons.getClass()

                if isinstance(instruction, instructionConstructor.Data):
                    combineInstructionData(thisinstruction,instruction)
                else:
                    if thisinstruction is not None:
                        thisinstruction.id = program_tag + '.' + str(number)
                        instructions_list.append(thisinstruction)
                        number = number+1
                    thisinstruction = instruction

            instructions_list.append(thisinstruction)
            return instructions_list


    for job in jobs:

        bytecode, roundtrip = set_up(job)
        
        error = freetype_compare(job, bytecode, roundtrip)
        #error = stack_code_compare(bytecode, roundtrip)

        print("Errors found for font {0}: {1}".format(job, str(len(error))))

def main(args):

    jobs = [] 
    try:
        options, files = getopt.getopt(args, "f:",)
    except getopt.GetoptError:
        usage()

    for option, value in options:
        if option == "-f":
            currentDir = "{0}/{1}".format(os.getcwd(), value)
            files = []
            for file in os.listdir(currentDir):
                files.append("{0}/{1}".format(currentDir, file))

    if not files:
        usage()

    for input in files:
        fileformat = input.split('.')[-1]
        if fileformat == 'ttx':
            jobs.append(input)
        else:
            continue

    runTests(jobs)

if __name__ == '__main__':
  main(sys.argv[1:])

